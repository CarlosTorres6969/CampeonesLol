// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/campeones.proto

package campeones

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CampeonService_GetCampeonInfo_FullMethodName   = "/campeones.CampeonService/GetCampeonInfo"
	CampeonService_GetCampeonList_FullMethodName   = "/campeones.CampeonService/GetCampeonList"
	CampeonService_AddCampeones_FullMethodName     = "/campeones.CampeonService/AddCampeones"
	CampeonService_GetCampeonByType_FullMethodName = "/campeones.CampeonService/GetCampeonByType"
)

// CampeonServiceClient is the client API for CampeonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampeonServiceClient interface {
	GetCampeonInfo(ctx context.Context, in *CampeonRequest, opts ...grpc.CallOption) (*CampeonResponse, error)
	GetCampeonList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CampeonResponse], error)
	AddCampeones(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewCampeonRequest, AddCampeonResponse], error)
	GetCampeonByType(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CampeonTypeRequest, CampeonResponse], error)
}

type campeonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampeonServiceClient(cc grpc.ClientConnInterface) CampeonServiceClient {
	return &campeonServiceClient{cc}
}

func (c *campeonServiceClient) GetCampeonInfo(ctx context.Context, in *CampeonRequest, opts ...grpc.CallOption) (*CampeonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampeonResponse)
	err := c.cc.Invoke(ctx, CampeonService_GetCampeonInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campeonServiceClient) GetCampeonList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CampeonResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CampeonService_ServiceDesc.Streams[0], CampeonService_GetCampeonList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, CampeonResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CampeonService_GetCampeonListClient = grpc.ServerStreamingClient[CampeonResponse]

func (c *campeonServiceClient) AddCampeones(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewCampeonRequest, AddCampeonResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CampeonService_ServiceDesc.Streams[1], CampeonService_AddCampeones_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewCampeonRequest, AddCampeonResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CampeonService_AddCampeonesClient = grpc.ClientStreamingClient[NewCampeonRequest, AddCampeonResponse]

func (c *campeonServiceClient) GetCampeonByType(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CampeonTypeRequest, CampeonResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CampeonService_ServiceDesc.Streams[2], CampeonService_GetCampeonByType_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CampeonTypeRequest, CampeonResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CampeonService_GetCampeonByTypeClient = grpc.BidiStreamingClient[CampeonTypeRequest, CampeonResponse]

// CampeonServiceServer is the server API for CampeonService service.
// All implementations must embed UnimplementedCampeonServiceServer
// for forward compatibility.
type CampeonServiceServer interface {
	GetCampeonInfo(context.Context, *CampeonRequest) (*CampeonResponse, error)
	GetCampeonList(*Empty, grpc.ServerStreamingServer[CampeonResponse]) error
	AddCampeones(grpc.ClientStreamingServer[NewCampeonRequest, AddCampeonResponse]) error
	GetCampeonByType(grpc.BidiStreamingServer[CampeonTypeRequest, CampeonResponse]) error
	mustEmbedUnimplementedCampeonServiceServer()
}

// UnimplementedCampeonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCampeonServiceServer struct{}

func (UnimplementedCampeonServiceServer) GetCampeonInfo(context.Context, *CampeonRequest) (*CampeonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampeonInfo not implemented")
}
func (UnimplementedCampeonServiceServer) GetCampeonList(*Empty, grpc.ServerStreamingServer[CampeonResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetCampeonList not implemented")
}
func (UnimplementedCampeonServiceServer) AddCampeones(grpc.ClientStreamingServer[NewCampeonRequest, AddCampeonResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddCampeones not implemented")
}
func (UnimplementedCampeonServiceServer) GetCampeonByType(grpc.BidiStreamingServer[CampeonTypeRequest, CampeonResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetCampeonByType not implemented")
}
func (UnimplementedCampeonServiceServer) mustEmbedUnimplementedCampeonServiceServer() {}
func (UnimplementedCampeonServiceServer) testEmbeddedByValue()                        {}

// UnsafeCampeonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampeonServiceServer will
// result in compilation errors.
type UnsafeCampeonServiceServer interface {
	mustEmbedUnimplementedCampeonServiceServer()
}

func RegisterCampeonServiceServer(s grpc.ServiceRegistrar, srv CampeonServiceServer) {
	// If the following call pancis, it indicates UnimplementedCampeonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CampeonService_ServiceDesc, srv)
}

func _CampeonService_GetCampeonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampeonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampeonServiceServer).GetCampeonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampeonService_GetCampeonInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampeonServiceServer).GetCampeonInfo(ctx, req.(*CampeonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampeonService_GetCampeonList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampeonServiceServer).GetCampeonList(m, &grpc.GenericServerStream[Empty, CampeonResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CampeonService_GetCampeonListServer = grpc.ServerStreamingServer[CampeonResponse]

func _CampeonService_AddCampeones_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CampeonServiceServer).AddCampeones(&grpc.GenericServerStream[NewCampeonRequest, AddCampeonResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CampeonService_AddCampeonesServer = grpc.ClientStreamingServer[NewCampeonRequest, AddCampeonResponse]

func _CampeonService_GetCampeonByType_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CampeonServiceServer).GetCampeonByType(&grpc.GenericServerStream[CampeonTypeRequest, CampeonResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CampeonService_GetCampeonByTypeServer = grpc.BidiStreamingServer[CampeonTypeRequest, CampeonResponse]

// CampeonService_ServiceDesc is the grpc.ServiceDesc for CampeonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampeonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campeones.CampeonService",
	HandlerType: (*CampeonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCampeonInfo",
			Handler:    _CampeonService_GetCampeonInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCampeonList",
			Handler:       _CampeonService_GetCampeonList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddCampeones",
			Handler:       _CampeonService_AddCampeones_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCampeonByType",
			Handler:       _CampeonService_GetCampeonByType_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/campeones.proto",
}
